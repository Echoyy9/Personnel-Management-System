# -*- coding: utf-8 -*-# Form implementation generated from reading ui file 'salaryTable1.ui'## Created by: PyQt5 UI code generator 5.9## WARNING! All changes made in this file will be lost!# 历史薪资查询import sysfrom PyQt5 import QtCore, QtGui, QtWidgetsimport pymysqlclass salaryHistory(QtWidgets.QTableWidget):    def __init__(self):        super().__init__()        self.setupUi(self)    def setupUi(self, salary):        salary.setObjectName("salary")        salary.resize(890, 589)        self.searchButton = QtWidgets.QPushButton(salary)        self.searchButton.setGeometry(QtCore.QRect(640, 5, 91, 41))        self.searchButton.setObjectName("searchButton")        self.comboBox = QtWidgets.QComboBox(salary)        self.comboBox.setGeometry(QtCore.QRect(750, 5, 121, 41))        self.comboBox.setObjectName("comboBox")        self.comboBox.addItem("")        self.comboBox.addItem("")        self.salaryTable = QtWidgets.QTableWidget(salary)        self.salaryTable.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)        self.salaryTable.setSelectionBehavior(QtWidgets.QTableWidget.SelectRows)        self.salaryTable.setGeometry(QtCore.QRect(5, 55, 870, 480))        self.salaryTable.setLayoutDirection(QtCore.Qt.LeftToRight)        self.salaryTable.setAlternatingRowColors(True)        self.salaryTable.setShowGrid(True)        self.salaryTable.setWordWrap(False)        self.salaryTable.setCornerButtonEnabled(True)        self.salaryTable.setObjectName("salaryTable")        self.salaryTable.setColumnCount(12)        self.salaryTable.setRowCount(10)        item = QtWidgets.QTableWidgetItem()        self.salaryTable.setVerticalHeaderItem(0, item)        item = QtWidgets.QTableWidgetItem()        self.salaryTable.setVerticalHeaderItem(1, item)        item = QtWidgets.QTableWidgetItem()        self.salaryTable.setVerticalHeaderItem(2, item)        item = QtWidgets.QTableWidgetItem()        font = QtGui.QFont()        font.setPointSize(10)        item.setFont(font)        self.salaryTable.setHorizontalHeaderItem(0, item)        item = QtWidgets.QTableWidgetItem()        self.salaryTable.setHorizontalHeaderItem(1, item)        item = QtWidgets.QTableWidgetItem()        self.salaryTable.setHorizontalHeaderItem(2, item)        item = QtWidgets.QTableWidgetItem()        self.salaryTable.setHorizontalHeaderItem(3, item)        item = QtWidgets.QTableWidgetItem()        self.salaryTable.setHorizontalHeaderItem(4, item)        item = QtWidgets.QTableWidgetItem()        self.salaryTable.setHorizontalHeaderItem(5, item)        item = QtWidgets.QTableWidgetItem()        self.salaryTable.setHorizontalHeaderItem(6, item)        item = QtWidgets.QTableWidgetItem()        self.salaryTable.setHorizontalHeaderItem(7, item)        item = QtWidgets.QTableWidgetItem()        self.salaryTable.setHorizontalHeaderItem(8, item)        item = QtWidgets.QTableWidgetItem()        self.salaryTable.setHorizontalHeaderItem(9, item)        item = QtWidgets.QTableWidgetItem()        self.salaryTable.setHorizontalHeaderItem(10, item)        item = QtWidgets.QTableWidgetItem()        self.salaryTable.setHorizontalHeaderItem(11, item)        self.salaryTable.horizontalHeader().setSortIndicatorShown(False)        self.salaryTable.horizontalHeader().setStretchLastSection(True)        self.salaryTable.verticalHeader().setVisible(False)        self.salaryTable.verticalHeader().setCascadingSectionResizes(False)        self.salaryTable.verticalHeader().setSortIndicatorShown(False)        self.salaryTable.verticalHeader().setStretchLastSection(False)        self.searchText = QtWidgets.QLineEdit(salary)        self.searchText.setGeometry(QtCore.QRect(5, 5, 600, 41))        self.searchText.setObjectName("searchText")        self.retranslateUi(salary)        self.readMysql()        self.searchButton.clicked.connect(self.searchRecord)        self.searchText.editingFinished.connect(self.searchRecord)        # 右键删除        self.salaryTable.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)        self.salaryTable.customContextMenuRequested[QtCore.QPoint].connect(self.MenuShow)        # self.salaryTable.itemClicked.connect(self.MenuShow)        QtCore.QMetaObject.connectSlotsByName(salary)    def retranslateUi(self, salary):        _translate = QtCore.QCoreApplication.translate        salary.setWindowTitle(_translate("salary", "Form"))        self.searchButton.setText(_translate("salary", "查询"))        self.comboBox.setItemText(0, _translate("salary", "按姓名查找"))        self.comboBox.setItemText(1, _translate("salary", "按工号查找"))        self.salaryTable.setSortingEnabled(False)        item = self.salaryTable.verticalHeaderItem(1)        item.setText(_translate("salary", "New Row"))        item = self.salaryTable.verticalHeaderItem(2)        item.setText(_translate("salary", "New Row"))        item = self.salaryTable.horizontalHeaderItem(0)        item.setText(_translate("salary", "编号"))        item = self.salaryTable.horizontalHeaderItem(1)        item.setText(_translate("salary", "员工编号"))        item = self.salaryTable.horizontalHeaderItem(2)        item.setText(_translate("salary", "姓名"))        item = self.salaryTable.horizontalHeaderItem(3)        item.setText(_translate("salary", "性别"))        item = self.salaryTable.horizontalHeaderItem(4)        item.setText(_translate("salary", "发薪日期"))        item = self.salaryTable.horizontalHeaderItem(5)        item.setText(_translate("salary", "实际薪资"))        item = self.salaryTable.horizontalHeaderItem(6)        item.setText(_translate("salary", "底薪"))        item = self.salaryTable.horizontalHeaderItem(7)        item.setText(_translate("salary", "奖金"))        item = self.salaryTable.horizontalHeaderItem(8)        item.setText(_translate("salary", "加班费"))        item = self.salaryTable.horizontalHeaderItem(9)        item.setText(_translate("salary", "养老金"))        item = self.salaryTable.horizontalHeaderItem(10)        item.setText(_translate("salary", "医疗保险"))        item = self.salaryTable.horizontalHeaderItem(11)        item.setText(_translate("salary", "应扣工资"))        __sortingEnabled =  self.salaryTable.isSortingEnabled()        self.salaryTable.setSortingEnabled(False)        self.salaryTable.setSortingEnabled(__sortingEnabled)    def readMysql(self):        db = pymysql.connect("localhost", "root", "123456", db="personnel_man")        cur = db.cursor()        sql = "select sa.sa_no,sa.s_no,staff.s_name,staff.s_sex,sa.s_date,real_salary,leastpays,prize,doublingpays,dkannuity,dkinsurrance,deduct "+\              "from salary as sa,staff "+\              "where sa.s_no = staff.s_no "+\              " Order By (sa.sa_no+0) desc ,sa.s_date desc"        cur.execute(sql)        len = cur.fetchall().__len__()        cur.execute(sql)        self.salaryTable.setRowCount(len)        k = 0        for i in cur:            w = 0            for j in i:                newItem = QtWidgets.QTableWidgetItem(str(j))                self.salaryTable.setItem(k, w, newItem)                w += 1            k += 1        cur.close()        db.close()    # 点击查询    def searchRecord(self):        db = pymysql.connect("localhost", "root", "123456", db="personnel_man")        cur = db.cursor()        if (self.searchText.text() == ""):            sql = "select sa.sa_no,sa.s_no,staff.s_name,staff.s_sex,sa.s_date,real_salary,leastpays,prize,doublingpays,dkannuity,dkinsurrance,deduct from salary as sa,staff " + \                  "where sa.s_no = staff.s_no " + \                  " Order By (sa.sa_no+0) desc ,sa.s_date desc"            cur.execute(sql)            len = cur.fetchall().__len__()            cur.execute(sql)            self.salaryTable.setRowCount(len)            k = 0            for i in cur:                w = 0                for j in i:                    newItem = QtWidgets.QTableWidgetItem(str(j))                    self.salaryTable.setItem(k, w, newItem)                    w += 1                k += 1            return        # 输入框内容        temp = self.searchText.text()        s = '%' + temp + '%'        # 分类查询        conditionChoice = self.comboBox.currentText()        if (conditionChoice == "按姓名查找"):            sql = "select sa.sa_no,sa.s_no,staff.s_name,staff.s_sex,sa.s_date,real_salary,leastpays,prize,doublingpays,dkannuity,dkinsurrance,deduct from salary as sa,staff " + \                  "where sa.s_no = staff.s_no " + \                  "and staff.s_name LIKE '%s' Order By (sa.sa_no+0) desc ,sa.s_date desc" % ( s )        elif (conditionChoice == "按工号查找"):            sql = "select sa.sa_no,sa.s_no,staff.s_name,staff.s_sex,sa.s_date,real_salary,leastpays,prize,doublingpays,dkannuity,dkinsurrance,deduct from salary as sa,staff " + \                  "where sa.s_no = staff.s_no " + \                  "and staff.s_no LIKE '%s' Order By (sa.sa_no+0) desc ,sa.s_date desc" % (s)        self.salaryTable.clearContents()        # 清空表格        # 重新查找后生成表格        cur.execute(sql)        len = cur.fetchall().__len__()        cur.execute(sql)        self.salaryTable.setRowCount(len)        k = 0        for i in cur:            w = 0            for j in i:                newItem = QtWidgets.QTableWidgetItem(str(j))                self.salaryTable.setItem(k, w, newItem)                w += 1            k += 1        if (self.searchText.text() == ""):            pass        cur.close()        db.close()    def MenuShow(self):        try:            rightMenu = QtWidgets.QMenu(self.salaryTable)            removeAction = QtWidgets.QAction(u"删除", self,                                             triggered=self.deleteItem)  # triggered 为右键菜单点击后的激活事件。这里slef.close调用的是系统自带的关闭事件。            rightMenu.addAction(removeAction)            rightMenu.exec_(QtGui.QCursor.pos())        except Exception as e:            print(e)    def deleteItem(self):        db = pymysql.connect("localhost", "root", "123456", db="personnel_man")        cur = db.cursor()        row = self.salaryTable.currentRow()        sa_no = self.salaryTable.item(row, 0).text()        print(sa_no)        reply = QtWidgets.QMessageBox.question(self, '提示框',                                               "确定要删除这条数据吗?", QtWidgets.QMessageBox.Yes |                                               QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)        if reply == QtWidgets.QMessageBox.Yes:            # print("yes")            sql = "delete from salary where sa_no = '%s'" % (sa_no)            try:                print(sql)                cur.execute(sql)            except Exception as e:                print(e)            self.salaryTable.removeRow(row)            db.commit()        else:            returnif __name__ == "__main__":    app = QtWidgets.QApplication(sys.argv)    mainMindow = salaryHistory()    mainMindow.show()    sys.exit(app.exec_())